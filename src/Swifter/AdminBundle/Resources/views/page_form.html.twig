{% extends "SwifterAdminBundle::loggedin_skeleton.html.twig" %}

{%  block main_content %}
    <div class="box-content">
        <form class="form-inline">
            <div class="control-group">
                <label class="control-label" for="name">Name</label>
                <div class="controls">
                    <input id="name" class="input-xlarge focused" type="text">
                </div>
            </div>
            <div class="control-group">
                <label class="control-label" for="uri">Uri</label>
                <div class="controls">
                    <div class="input-prepend">
                        <span class="add-on">/swifter/</span>
                        <input id="uri" type="text" size="16">
                    </div>
                </div>
            </div>
            <div class="control-group">
                <label class="control-label" for="selectError">Modern Select</label>
                <div class="controls">
                    <select id="selectError" data-rel="chosen">
                        <option>Option 1</option>
                        <option>Option 2</option>
                        <option>Option 3</option>
                        <option>Option 4</option>
                        <option>Option 5</option>
                    </select>
                </div>
            </div>
        </form>
        <a id="add-block-button" class="btn btn-success" href="javascript:;"><i class="icon-plus-sign icon-white"></i>Add</a>
    </div>
{% endblock %}

{% block js %}
    {{ parent() }}
    <script>
        var Page = function(data) {
            this.id = ko.observable();
            this.name = ko.observable();
            this.uri = ko.observable();
            this.templateTitle = ko.observable();

            if (data) {
                this.update(data);
            }
        }

        Page.prototype.update = function(data) {
            this.id(data.id);
            this.name(data.name);
            this.uri(data.uri);
            this.templateTitle(data.template.title);
        };

        var PageModel = function(pages) {
            var self = this;

            self.pages = ko.observableArray(ko.utils.arrayMap(pages, function(data) {
                return new Page(data);
            }));
        };

        $.get('{{ path('admin_retrieve_pages') }}')
            .done(function( data ) {
                ko.applyBindings(new PageModel(data));
            }
        );
    </script>
{% endblock %}