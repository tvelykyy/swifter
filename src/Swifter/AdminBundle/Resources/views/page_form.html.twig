{% extends "SwifterAdminBundle::loggedin_skeleton.html.twig" %}

{%  block main_content %}
    <div class="box-content">
        <div style="display:table; width:100%">
            <div style="display:table-cell; width:30%">
                <form class="form-inline" data-bind="with: page">
                    <div class="control-group">
                        <label class="control-label" for="name">Name</label>
                        <div class="controls">
                            <input class="input-xlarge focused" type="text" data-bind="value: name"/>
                        </div>
                    </div>
                    <div class="control-group">
                        <label class="control-label" for="uri">Uri</label>
                        <div class="controls">
                            <div class="input-prepend">
                                <span class="add-on" data-bind="text: parentUri"></span>
                                <input type="text" size="16" data-bind="value: pageUri"/>
                            </div>
                        </div>
                    </div>
                    <div class="control-group">
                        <label class="control-label" for="parent">Parent Page</label>
                        <div class="controls parent-page" data-bind="with: parent">
                            <select data-rel="chosen" data-bind="
                                options: $parents[1].availableParents,
                                optionsText: 'name',
                                optionsValue: 'id',
                                value: id,
                                optionsCaption: 'Choose...'">
                            </select>
                        </div>
                    </div>
                    <div class="control-group">
                        <label class="control-label" for="template">Template</label>
                        <div class="controls" data-bind="with: template">
                            <select data-rel="chosen" data-bind="
                                options: $parents[1].availableTemplates,
                                optionsText: 'name',
                                optionsValue: 'id',
                                value: id,
                                optionsCaption: 'Choose...'">
                            </select>
                        </div>
                    </div>
                    <div data-bind="template: {name:'block-template', foreach:pageBlocks}"></div>
                </form>
            </div>
            <div id="template-source" style="display:table-cell; width:70%">
                <pre style="font-family: monospace;">
                    <code>
                    </code>
                </pre>
            </div>
        </div>
        <div class="clear"></div>
        <div>
            <a id="add-block-button" class="btn btn-success" href="javascript:;" data-bind="click: savePage"><i class="icon-plus-sign icon-white"></i>Add</a>
        </div>
    </div>
    <script type="text/html" id="block-template">
        <div class="control-group" data-bind="with: block">
            <label class="control-label" for="template" data-bind="text: title"></label>
            <div class="checkbox" style="float: right; padding-right:100px">
                <label>
                    <input type="checkbox" data-bind="checked: $parent.override">
                    Override
                </label>
            </div>
            <div class="controls">
                <textarea data-bind="value: $parent.tempContent, enable: $parent.override" class="autogrow"></textarea>
            </div>
        </div>
    </script>
{% endblock %}

{% block js %}
    {{ parent() }}
    <script>
        var Page = function(data) {
            var self = this;
            self.name = ko.observable();
            self.parentUri = ko.observable();
            self.pageUri = ko.observable();
            self.uri = ko.computed({
                read: function() {
                    return self.parentUri() + self.pageUri();
                },
                write: function(value) {
                    var pageUriIndex = value.lastIndexOf('/') + 1;
                    self.pageUri(value.substring(pageUriIndex));
                    self.parentUri(value.substring(0, pageUriIndex));
                }
            });
            self.parent = ko.observable({id: ko.observable()});
            self.template = ko.observable({id: ko.observable()});
            self.pageBlocks = ko.observableArray();
            self.parentPageBlocks = ko.observableArray();

            self.template().id.subscribe(function(newId) {
                if (newId) {
                    self.pageBlocks.removeAll();
                    $.ajax({
                        url: '{{ path('admin_get_template', {'id': 0}) }}'.replace('0', newId),
                        async: false
                    })
                    .done(function(response){
                        $('#template-source pre code').text(response);
                        $('pre code').each(function(i, e) {hljs.highlightBlock(e)});

                        var blockTitleRegExp = new RegExp("{" + "{\\s([A-Z_]+)[|\\sa-zA-z]*}}", 'g');
                        var titles = '';
                        while (match = blockTitleRegExp.exec(response)) {
                            titles += match[1] + ';';
                        }

                        $.ajax({
                            url: '{{ path('admin_get_blocks_by_titles', {'semicolonSeparatedTitles': 0}) }}'.replace('0', titles),
                            async: false
                        })
                        .done(function(response) {
                                    console.log("template");
                            for(var i in response) {
                                var block = response[i];
                                self.pageBlocks.push((function(){
                                     var pageBlock = {
                                        id: null,
                                        block: {id: block.id, title: block.title},
                                        content: ko.observable(),
                                        override: ko.observable(false)
                                    }
                                    pageBlock.tempContent = ko.computed({
                                        read: function() {
                                            if (pageBlock.content()) {
                                                return pageBlock.content();
                                            }

                                            var blocks = self.parentPageBlocks();
                                            for (var i = 0; i < blocks.length; i++) {
                                                if (blocks[i].block.id === this.block.id) {
                                                    return blocks[i].content;
                                                }
                                            }
                                        },
                                        write: function(newValue) {
                                            pageBlock.content(newValue);
                                        },
                                        owner: pageBlock
                                    });

                                    return pageBlock;
                                })());
                            }
                        })
                    })
                }
            });

            self.parent().id.subscribe(function(newId) {
                if (newId) {
                    $.ajax({
                        url: '{{ path('admin_get_page_blocks', {'id': 0}) }}'.replace('0', newId),
                        async: false
                    })
                    .done(function(response) {
                                console.log("parent");
                        self.parentPageBlocks(response.pageBlocks);

                        if (response.uri != '/') {
                            response.uri = response.uri + '/';
                        }
                        self.parentUri(response.uri);
                    })
                }
            });

            if(data) {
                self.update(data);
            }
        }

        Page.prototype.update = function(data) {
            this.id = data.id;
            this.name(data.name);
            this.uri(data.uri);
            if (data.parent) {
                this.parent().id(data.parent.id);
            }
            this.template().id(data.template.id);
//            this.pageBlocks(data.pageBlocks);

            for (var i = 0; i < data.pageBlocks.length; i++)  {
                var currentPageBlock = data.pageBlocks[i];
                ko.utils.arrayForEach(this.pageBlocks(), function(resultPageBlock) {
                    if (resultPageBlock.block.id === currentPageBlock.block.id) {
                        resultPageBlock.id = currentPageBlock.id;
                        resultPageBlock.tempContent(currentPageBlock.content);
                        resultPageBlock.override(true);
                    }
                });
            }
        };

        Page.prototype.toJSON = function() {
            var page = ko.toJS(this);
            delete page.parentPageBlocks;
            delete page.parentUri;
            delete page.pageUri;

            if (!page.parent.id) {
                delete page.parent;
            }

            page.pageBlocks = $.grep(page.pageBlocks, function(block){
                return block.override;
            });

            return page;
        }

        var PageModel = function(data) {
            var self = this;

            self.availableParents = ko.observableArray();
            if (data.parent) {
                self.availableParents().push({"id": data.parent.id, "name": data.parent.name});
            }

            self.availableTemplates = ko.observableArray([
                {id: 1, name: 'Main'}, {id: 2, name: 'Uris'}
            ]);

            self.page = ko.observable();
            self.page(new Page(data));

            self.savePage = function() {
                $.ajax({
                    type: 'POST',
                    url: '{{ path('admin_save_page') }}',
                    data: ko.toJSON(self.page()),
                    success: function() {
                        window.location.replace('{{ path('admin_ui_pages') }}');
                    }
                });
            };
        };

        var pageStr = "{{ page }}";
        if (pageStr) {
            var pageToEdit = JSON.parse(pageStr.replace(/&quot;/g, '"'));
            var pageModel = new PageModel(pageToEdit);
        } else {
            var pageModel = new PageModel();
        }
        ko.applyBindings(pageModel);

        $(document).ready(function() {
            var delay = (function(){
                var timer = 0;
                return function(callback, ms, params){
                    clearTimeout (timer);
                    timer = setTimeout(function() {callback(params)}, ms);
                }
            })();


            $('.parent-page input').keyup(function() {
                delay(function(name){
                    $.ajax({
                        url: '{{ path('admin_get_pages_by_name_like', {'name': 0}) }}'.replace('0', name)
                    })
                    .done(function(response){
                        pageModel.availableParents.removeAll();
                        for (var i in response) {
                            pageModel.availableParents.push(response[i]);
                        }
                        $('.parent-page [data-rel="chosen"]').trigger("liszt:updated");
                    });
                }, 1000, $(this).val());
            });
        });
    </script>
{% endblock %}